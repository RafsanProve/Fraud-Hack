# -*- coding: utf-8 -*-
"""clustering.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1r_eQzKKFWSbfKtwXwa2CkjE6OCFZI5-D
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA

data = pd.read_csv(r"bank_transactions_data_2.csv")

data.info()

data.describe()

sns.boxplot(data)
plt.show()

data.head(5)

"""

```
Data prepration
```

"""

data = data.drop(columns=['TransactionID', 'AccountID', 'DeviceID', 'IP Address', 'MerchantID'])

def vectorizer(data):
    vectorizer = TfidfVectorizer()
    for col in data.columns:
        if data[col].dtype == 'object':
            data[col] = vectorizer.fit_transform(data[col]).toarray()
    return data

data = vectorizer(data)

def normalizer(df):
    Q1 = data.quantile(0.25)
    Q3 = data.quantile(0.75)
    IQR = Q3 - Q1
    upper_bound = Q3 + 1.5 * IQR
    lower_bound = Q1 - 1.5 * IQR
    for col in data.columns:
        data[col] = data[col].apply(lambda x: upper_bound[col] if x > upper_bound[col] else(lower_bound[col] if x < lower_bound[col] else x))
    return data

data = normalizer(data)

X = data

"""Building Model"""

kmeans = KMeans(n_clusters=3, n_init='auto', random_state=42)
kmeans.fit(X)

y_pred = kmeans.predict(X)
centroids = kmeans.cluster_centers_

pca = PCA(n_components=2)
X_pca = pca.fit_transform(X)

"""Visulaizationn"""

plt.figure(figsize=(8,6))
plt.scatter(X_pca[:,0], X_pca[:,1], c=kmeans.labels_, cmap='viridis')
plt.scatter(y_pred,y_pred)
plt.show()

plt.figure(figsize=(7,5))
plt.scatter(X_pca[:,0], X_pca[:,1], c=y_pred, cmap='viridis')
plt.scatter(centroids[:,0],centroids[:,1], c='red', s=500, marker='X')
plt.show()

inertia = []
cluster_range = range(1,15)
for k in cluster_range:
    kmeans = KMeans(n_clusters = k, n_init='auto')
    kmeans.fit(X)
    inertia.append(kmeans.inertia_)

plt.plot(cluster_range,inertia, linestyle='-', c='blue' )
plt.xlabel('Klasterleri Sayi')
plt.ylabel('Inertia')
plt.xticks(cluster_range)
plt.grid()
plt.show()

print(f'Inertia:\n{kmeans.inertia_}')